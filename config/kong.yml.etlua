# Kong app config template

## Custom plugins on this server
custom_plugins:
  - ssl
  - jwt
  - acl
  - cors
  - oauth2
  - tcp-log
  - udp-log
  - file-log
  - http-log
  - key-auth
  - hmac-auth
  - basic-auth
  - ip-restriction
  - mashape-analytics
  - request-transformer
  - response-transformer
  - request-size-limiting
  - rate-limiting
  - response-ratelimiting
  - hello-world-header
  - ndfd-xml-as-json
  - librato-analytics

## The Kong working directory
## (Make sure you have read and write permissions)
nginx_working_dir: /app/nginx-working

## Port configuration
proxy_listen: "0.0.0.0:<%= proxy_port %>"
proxy_listen_ssl: "0.0.0.0:<%= proxy_ssl_port %>"
admin_api_listen: "0.0.0.0:<%= admin_api_port %>"
cluster_listen: "<%= cluster_listen %>"

cluster:
  encrypt: "<%= cluster_secret %>"

## Specify the DAO to use
database: postgres

## Databases configuration
cassandra:
  contact_points:
<% for i, host in pairs(cassandra_hosts) do -%>
    - "<%= host %>"
<% end -%>
  username: "<%= cassandra_user %>"
  password: "<%= cassandra_password %>"
  keyspace: "<%= cassandra_keyspace %>"
  replication_strategy: "SimpleStrategy"
  replication_factor: <%= cassandra_replication_factor %>
  ssl:
    enabled: <%= cassandra_ssl %>
<% if cassandra_ssl then -%>
    verify: true
    certificate_authority: "<%= cassandra_cert %>"
<% end -%>

postgres:
  host: "<%= postgres_host %>"
  port: <%= postgres_port %>
  user: "<%= postgres_user %>"
  password: "<%= postgres_password %>"
  database: "<%= postgres_database %>"
  ssl: true

## SSL Settings
## (Uncomment the two properties below to set your own certificate)
# ssl_cert_path: /path/to/certificate.pem
# ssl_key_path: /path/to/certificate.key

## Sends anonymous error reports
send_anonymous_reports: true

## In-memory cache size (MB)
memory_cache_size: 256

## Nginx configuration
nginx: |
  {{user}}
  worker_processes auto;
  # On Heroku, stream into logplex
  # https://devcenter.heroku.com/articles/process-model#output-streams-as-logs
  error_log stderr info;
  # On Heroku, do not daemonize
  # https://devcenter.heroku.com/articles/runtime-principles#foreground-execution
  # Do NOT set `daemon` here, so it can be overridden at runtime in `Procfile.web`
  #daemon off; ## "on" is the default
  worker_rlimit_nofile {{auto_worker_rlimit_nofile}};
  env KONG_CONF;
  env KONG_EXTERNAL_SUPERVISE;
  env PATH;
  env LIBRATO_USER;
  env LIBRATO_TOKEN;
  events {
    worker_connections {{auto_worker_connections}};
    multi_accept on;
  }
  http {
    resolver {{dns_resolver}} ipv6=off;
    charset UTF-8;
    access_log logs/access.log;
    access_log off;
    # Timeouts
    keepalive_timeout 60s;
    client_header_timeout 60s;
    client_body_timeout 60s;
    send_timeout 60s;
    # Proxy Settings
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
    proxy_ssl_server_name on;
    # IP Address
    real_ip_header X-Forwarded-For;
    set_real_ip_from 0.0.0.0/0;
    real_ip_recursive on;
    # Other Settings
    client_max_body_size 0;
    underscores_in_headers on;
    reset_timedout_connection on;
    tcp_nopush on;
    ################################################
    #  The following code is required to run Kong  #
    # Please be careful if you'd like to change it #
    ################################################
    # Lua Settings
    lua_package_path ';;';
    lua_code_cache on;
    lua_max_running_timers 4096;
    lua_max_pending_timers 16384;
    lua_shared_dict reports_locks 100k;
    lua_shared_dict cluster_locks 100k;
    lua_shared_dict cluster_autojoin_locks 100k;
    lua_shared_dict cache {{memory_cache_size}}m;
    lua_shared_dict cassandra 1m;
    lua_shared_dict cassandra_prepared 5m;
    lua_socket_log_errors off;
    {{lua_ssl_trusted_certificate}}
    init_by_lua_block {
      kong = require "kong"
      kong.init()
    }
    init_worker_by_lua_block {
      kong.init_worker()
    }
    server {
      server_name _;
      listen {{proxy_listen}};
      listen {{proxy_listen_ssl}} ssl;
      ssl_certificate_by_lua_block {
        kong.ssl_certificate()
      }
      ssl_certificate {{ssl_cert}};
      ssl_certificate_key {{ssl_key}};
      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;# omit SSLv3 because of POODLE (CVE-2014-3566)
      location / {
        default_type 'text/plain';
        # These properties will be used later by proxy_pass
        set $upstream_host nil;
        set $upstream_url nil;
        # Authenticate the user and load the API info
        access_by_lua_block {
          kong.access()
        }
        # Proxy the request
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $upstream_host;
        proxy_pass $upstream_url;
        proxy_pass_header Server;
        # Add additional response headers
        header_filter_by_lua_block {
          kong.header_filter()
        }
        # Change the response body
        body_filter_by_lua_block {
          kong.body_filter()
        }
        # Log the request
        log_by_lua_block {
          kong.log()
        }
      }
      location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
      }
      error_page 500 502 503 504 /50x;
      location = /50x {
        internal;
        content_by_lua_block {
          require("kong.core.error_handlers")(ngx)
        }
      }
    }
    server {
      listen {{admin_api_listen}};
      client_max_body_size 10m;
      client_body_buffer_size 10m;
      location / {
        default_type application/json;
        content_by_lua_block {
          ngx.header["Access-Control-Allow-Origin"] = "*"
          if ngx.req.get_method() == "OPTIONS" then
            ngx.header["Access-Control-Allow-Methods"] = "GET,HEAD,PUT,PATCH,POST,DELETE"
            ngx.header["Access-Control-Allow-Headers"] = "Content-Type"
            ngx.exit(204)
          end
          local lapis = require "lapis"
          lapis.serve "kong.api.app"
        }
      }
      location /nginx_status {
        internal;
        access_log off;
        stub_status;
      }
      location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
      }
    }
  }

